$VendorPrefixes: (
  "-webkit-",
  "-moz-",
  "-o-",
  "-ms-",
  ""
);


@mixin vendors($propertyName, $propertyValue){
  @for $i from 1 through length($VendorPrefixes) {
    $vendor: nth($VendorPrefixes, $i);
    
    #{ $vendor }#{ $propertyName }: #{ $propertyValue };
  }
}


@mixin css-keyframes($animationName){
  @-webkit-keyframes #{$animationName} {
      @content;
  }
  @-moz-keyframes #{$animationName} {
      @content;
  }
  @-o-keyframes #{$animationName} {
      @content;
  }
  @keyframes #{$animationName} {
      @content;
  }
}


@mixin textureBuilder($color, $image, $autoSize: true){
  @if type-of($image) == list{
    $concat: ();
    
    @for $i from 1 through length($image) {
      $theUrl: nth($image, $i);
      
      $concat: append($concat, (url( $theUrl )), comma);
    }
    
    background-image: $concat;
  }
  @else{
    background-image: url( $image );
  }
  
  background-position: top left;
  @if $autoSize == true{
    background-size:100% 100%;
  }
  background-repeat:repeat;
  background-color:$color;
  transform-style: preserve-3d;
}


@mixin boxShadow($x: 0, $y: 0, $blur: 0, $spread: 0, $color: transparent, $inset: false){
  @if $inset == true{
    -webkit-box-shadow: inset $x $y $blur $spread $color;
    box-shadow: inset $x $y $blur $spread $color;
  }
  @else{
    -webkit-box-shadow: $x $y $blur $spread $color;
    box-shadow: $x $y $blur $spread $color;
  }
}


@mixin cube($x, $y, $z, $moveUp: false, $subtle: false){
  width:$x;
  height:$y;
  position:absolute;
  @include boxShadow(0px, 0px, 50px, 0px, rgba(0,0,0,0.25), true);
  transform-style: preserve-3d;
  
  @if $moveUp == true{
    transform: translateZ($z+1);
  }
  
  *{
    position:absolute;
  }
  
  > .front, > .side{
    transform-style: preserve-3d;
    
    @if $subtle == true{
      @include boxShadow(0px, 0px, 50px, 0px, rgba(0,0,0,0.3), true);
    }
    @else{
      @include boxShadow(0px, 0px, 50px, 0px, rgba(0,0,0,1), true);
    }
  }
  
  > .side{
    left:100%;
    top:0%;
    @if $y == auto{    
      height:100%;
    }
    @else{
      height:$y;
    }
    width:$z;
    @include transformObject((
      rotateY: 90deg,
      translateX: $z/2,
      translateZ: 0-($z/2)
    ));
  }

  > .front{
    left:0%;
    top:100%;
    @if $x == auto{    
      width:100%;
    }
    @else{
      width:$x;
    }
    height:$z;
    @include transformObject((
      rotateX: 90deg,
      rotateZ: 180deg,
      translateY: $z/2,
      translateZ: $z/2
    ));

  }
}


@mixin transformObject($ob: ()){
  $default: (
    translateZ: 0px,
    translateX: 0px,
    translateY: 0px,
    rotateX: 0deg,
    rotateY: 0deg,
    rotateZ: 0deg,
    scale: 1
  );
  
  $merge: map-merge($default, $ob);
  
  @if map-get($merge, scale) != 1{
    transform: rotateX(map-get($merge, rotateX)) rotateY(map-get($merge, rotateY)) rotateZ(map-get($merge, rotateZ)) translateX(map-get($merge, translateX)) translateY(map-get($merge, translateY)) translateZ(map-get($merge, translateZ)) scale3d(map-get($merge, scale),map-get($merge, scale),map-get($merge, scale));
  }
  @else{
    transform: rotateX(map-get($merge, rotateX)) rotateY(map-get($merge, rotateY)) rotateZ(map-get($merge, rotateZ)) translateX(map-get($merge, translateX)) translateY(map-get($merge, translateY)) translateZ(map-get($merge, translateZ));
  }
}


@mixin spriteTransform($ob: ()){
  $default: (
    rotateX: -45deg,
    rotateY: 45deg,
    rotateZ: -29.4deg,
    translateZ: 25px,
    translateY: -12px
  );
  
  $merge: map-merge($default, $ob);
  
  @include transformObject($merge);
}


@mixin clipPath($path: ''){
   -webkit-clip-path: url(##{$path});
    clip-path: url(/##{$path});
}


@mixin round($radius: 0px){
  border-radius: $radius; 
  background-clip: padding-box;
}


@mixin gridedSprite($xs: 1, $ys: 1, $ratio: 1, $image: ''){
  $sizeMod: 1.41422;
  width: 50px * $xs * $sizeMod;
  height: 50px * $xs / $ratio * $sizeMod;
  background:transparent url( $image ) top left/100% 100% no-repeat;
}